#!/usr/bin/env node

const requests = require('request-promise');
const config = require('./config');
const mock = require('./mocks/mocks')
const util = require('./util');

// config.routes.map(route => {
//     route.operations.map(method => {
//         console.log(config.url.concat(route.url));
//         let startMoment = Date.now();

//         let url = config.url.concat(route.url);
//         let body =  mock[route.url.concat('-', method)];
//         console.log(body);
//         requests[method](util.createOptions(url, body))
//             .then( response => {
//                 console.log(response.statusCode);
//                 let endMoment = Date.now();
//                 util.log(startMoment, endMoment);
//             });
//     });
// });

// let url = config.url.concat(config.routes[0].url);
// let body =  mock['/team-post'];
// console.log(body);
// for(let i = 0; i < 1; i++) {
//     let startMoment = Date.now();
//     requests.post(util.createOptions('https://team-scheduler-app.herokuapp.com/team', body))
//     .then(res => {
//         let endMoment = Date.now();
//         util.log(startMoment, endMoment, 'team-post');
//     });
// }

// body = mock['/team-post'];
// let bodyLogin = mock['/team-post'].admin;
// for(let i = 0; i < 1000; i++) {
//     requests.post(util.createOptions('https://team-scheduler-app.herokuapp.com/team', body))
//     .then(res => {
//         bodyLogin.teamId = res.team._id;
//         let startMoment = Date.now();
//         requests.post(util.createOptions('https://team-scheduler-app.herokuapp.com/login', bodyLogin))
//         .then(res => {
//             let endMoment = Date.now();
//             util.log(startMoment, endMoment, 'login');
//             console.log(startMoment);
//         });
//     });
// }

let url = config.url.concat(config.routes[1].url);
let body =  mock['/pending-members'];
console.log(body);
for(let i = 0; i < 1; i++) {
    let startMoment = Date.now();
    requests.post(util.createOptions('https://team-scheduler-app.herokuapp.com/pending-members', body))
    .then(res => {
        let endMoment = Date.now();
        util.log(startMoment, endMoment, 'pending-members');
    });
}